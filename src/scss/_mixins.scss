// Font Html Responsive
@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {
	& {
		@each $property in $properties {
			#{$property}: $min-value;
		}

		@media screen and (min-width: $min-screen) {
			@each $property in $properties {
				#{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value); 
			}
		}

		@media screen and (min-width: $max-screen) {
			@each $property in $properties {
				#{$property}: $max-value;
			}
		}
	}
}

@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {
	$a: ($max-value - $min-value) / ($max-screen - $min-screen);
	$b: $min-value - $a * $min-screen; 

	$sign: "+";
	@if ($b < 0) {
		$sign: "-";
		$b: abs($b);
	}
	@return calc(#{$a*100}vw #{$sign} #{$b});
}

// Px To Rem
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  } 
  
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  
  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline * 1rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}


// Shadow
@mixin shadow($shadow-size, $shadow-color-1, $shadow-color-2) {

	@if ($shadow-size == "xs") {
    box-shadow: rem(0 2px 4px $shadow-color-1, 0 2px 4px $shadow-color-2);
  }

  @if ($shadow-size == "sm") {
    box-shadow: rem(0 3px 6px $shadow-color-1, 0 3px 6px $shadow-color-2);
  }
  
  @if ($shadow-size == "m") {
    box-shadow: rem(0 9px 20px $shadow-color-1, 0 5px 6px $shadow-color-2);
  }
  
  @if ($shadow-size == "l") {
    box-shadow: rem(0 8px 20px $shadow-color-1, 0 6px 9px $shadow-color-2);
  }
  
  @if ($shadow-size == "xl") {
    box-shadow: rem(0 16px 38px $shadow-color-1, 0 12px 10px $shadow-color-2);
  }
  
  @if ($shadow-size == "input") {
    box-shadow: rem(0 5px 30px $shadow-color-1, 0 2px 15px $shadow-color-2);
  }

  @if ($shadow-size == "text") {
    text-shadow: rem(0 2px 6px $shadow-color-1, 0 2px 6px $shadow-color-2);
  }  

  @if ($shadow-size == "xs-outline") {
    box-shadow: rem(0 0px 2px $shadow-color-1, 0 0px 2px $shadow-color-2);
  }

}
